Joystickex.Pas; V1.0

Author : Heiko Groschupp; h.groschupp@media-ag.com; Germany




Disclaimer
----------
THIS SOFTWARE IS PROVIDED BY HEIKO GROSCHUPP "AS IS" AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
POSSIBILITY OF SUCH DAMAGE.






Purpose: 

Joystickex is a nonvisual component to implement capturing of joystick input to your app.
It uses no timer to poll joystick informations but is driven by windows messages. That means as soon as windows notifys a joystick event it is sended to that component and and will be processed at the same time.

Interface:

    // Get Infos about device
    Function GetDevices  :Byte; --> returns Number of connected devises
    function GetButtons :Byte; --> returns Number of Buttons of the joystick at the selected Gameport

    // Set to or set out of Operation
    procedure disableJoystick; --> capturing of the joystick is disabled 
    function EnableJoyStick :Boolean;--> initialisize joystick capturing; returns FALSE if failed (i.e. no joystick connected)

   // Calibrating functions
   function CalibrateCenter : Boolean; --> set the internal center values to current x/y- values
   function BeginCalibrateRange  : Boolean; --> component is set to calibrating mode; change s of x/x range are stored every time the values go higher/ lower then they where before
   procedure StopCalibrateRange; --> sets component to normal mode

   // System dialog
   procedure SysDialog; --> executes the windows Dialog for Joystick properties

   // save settings
   procedure SaveCalibration; --> stores the internal calibration datas to the app. directory (INI- file)
   procedure LoadCalibration; --> loads the internal calibration datas from INI-file in the app. directory
 
 
properties


    property GamePort  --> spezifies the port
    property Polling: Boolean read FPolling write FSetEventByChangeOnly;
    property Interval :Integer read FInterval Write FSetInterval;
    property Center : TPoint read FCenter;
    property EventThreshold : Real read FThreshold Write FSetThreshold;
    property Scaled : Boolean read FScaled Write FSetScaled;

    property XScaledBy :TScalevalue read FXScaleby Write FXSetScaleby;
    property YScaledBy :TScalevalue read FYScaleby Write FYSetScaleby;
    property ZScaledBy :TScalevalue read FZScaleby Write FZSetScaleby;
    property CalAutoSave :Boolean read FCalAutoSave Write FCalAutoSave;
    property CalAutoLoad :Boolean read FCalAutoLoad Write FSetCalAutoLoad;
    
    // Read onlys
    property MaxLeftUP :TPoint read FMaxLeftUP;
    property MaxRightDown :TPoint  read FMaxrightDown;
    property MaxZ :integer read FMaxZ;
    property MinZ :integer read FMinZ ;
    property NumButtons :Integer read FNumbuttons;
    //Events
    property OnButton1_Change: TButtonNotifyEvent read  FOnButton1_Change Write  FOnButton1_Change;
    property OnButton2_Change: TButtonNotifyEvent read  FOnButton2_Change Write  FOnButton2_Change;
    property OnButton3_Change: TButtonNotifyEvent read  FOnButton3_Change Write  FOnButton3_Change;
    property OnButton4_Change: TButtonNotifyEvent read  FOnButton4_Change Write  FOnButton4_Change;

    property JoyZMove :TJoyZMoveEvent read FJoyZMoveEvent write FJoyZMoveEvent;
    property JoyMove : TJoyMoveEvent read FJoyMoveEvent Write FJoyMoveEvent;
